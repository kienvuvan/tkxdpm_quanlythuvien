/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.view;

import book.controller.BookController;
import book.model.Book;
import bookcopy.controller.BookCopyController;
import bookcopy.model.BookCopy;
import card.controller.CardController;
import category.controller.CategoryController;
import java.sql.Date;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import loan.model.Loan;
import login.views.ChooseLoginForm;
import login.views.RegisterForm;
import publisher.controller.PublisherController;
import registeterm.model.RegisterBorrow;
import user.controller.UserController;
import util.Constants;
import util.Utils;

/**
 *
 * @author kienanh2903
 */
public class UserMainForm extends javax.swing.JFrame {

    BookController bc;
    BookCopyController bcc;
    UserController uc;
    CardController cc;
    CategoryController categoryController;
    PublisherController pc;
    private static String username;

    /**
     * Creates new form Home
     *
     * @param username tên tài khoản độc giả
     */
    public UserMainForm(String username) {
        initComponents();
        this.username = username;
        if (username != null) {
            jLabel_username.setText(username);

        } else {
            jLabel_username.setText("GUEST");
            jMenuItem2.setVisible(false);
            jMenuItem1.setVisible(false);
            jMenuItem5.setVisible(false);
        }
        setVisiableSearchBook();
        bc = new BookController();
        bc.displayBookListToTable(jTable_searchBookCopy, bc.getAllBook());
        uc = new UserController();
        bcc = new BookCopyController();
        cc = new CardController();
        categoryController = new CategoryController();
        categoryController.loadListCategoryToComboBox(jComboBox_category, categoryController.getAll());
        pc = new PublisherController();
        pc.loadListPublisherToComboBox(jComboBox_publisher, pc.getAll());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPopupMenu_registeBorrowBook = new javax.swing.JPopupMenu();
        jMenuItem_inforBook = new javax.swing.JMenuItem();
        jMenuItem_addBookCopy = new javax.swing.JMenuItem();
        jPopupMenu_basket = new javax.swing.JPopupMenu();
        jMenuItem_deleteBookCopy = new javax.swing.JMenuItem();
        jMenuItem_deleteAllBasket = new javax.swing.JMenuItem();
        jPopupMenu_registedBorrowBook = new javax.swing.JPopupMenu();
        jMenuItem_deleteRegisreBorrowBookCopy = new javax.swing.JMenuItem();
        jMenuItem_deleteAllRegisteBorrowBookCopy = new javax.swing.JMenuItem();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jPanel_searchBook = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField_id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField_author = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField_title = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel_username = new javax.swing.JLabel();
        jButton_searchBook = new javax.swing.JButton();
        jComboBox_publisher = new javax.swing.JComboBox<>();
        jComboBox_category = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_searchBookCopy = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable_regisBookCopyBasket = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel_borrowBook = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable_registedBookCopy = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable_borrowedBook = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jPopupMenu_registeBorrowBook.setBorderPainted(false);
        jPopupMenu_registeBorrowBook.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPopupMenu_registeBorrowBook.setLabel("");

        jMenuItem_inforBook.setText("Xem thông tin sách");
        jMenuItem_inforBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_inforBookActionPerformed(evt);
            }
        });
        jPopupMenu_registeBorrowBook.add(jMenuItem_inforBook);

        jMenuItem_addBookCopy.setText("Thêm vào giỏ đăng ký mượn sách");
        jMenuItem_addBookCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_addBookCopyActionPerformed(evt);
            }
        });
        jPopupMenu_registeBorrowBook.add(jMenuItem_addBookCopy);

        jMenuItem_deleteBookCopy.setText("Xóa sách");
        jMenuItem_deleteBookCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteBookCopyActionPerformed(evt);
            }
        });
        jPopupMenu_basket.add(jMenuItem_deleteBookCopy);

        jMenuItem_deleteAllBasket.setText("Xóa hết giỏ sách");
        jMenuItem_deleteAllBasket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteAllBasketActionPerformed(evt);
            }
        });
        jPopupMenu_basket.add(jMenuItem_deleteAllBasket);

        jMenuItem_deleteRegisreBorrowBookCopy.setText("Hủy đăng ký");
        jMenuItem_deleteRegisreBorrowBookCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteRegisreBorrowBookCopyActionPerformed(evt);
            }
        });
        jPopupMenu_registedBorrowBook.add(jMenuItem_deleteRegisreBorrowBookCopy);

        jMenuItem_deleteAllRegisteBorrowBookCopy.setText("Hủy tất cả đăng ký");
        jMenuItem_deleteAllRegisteBorrowBookCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_deleteAllRegisteBorrowBookCopyActionPerformed(evt);
            }
        });
        jPopupMenu_registedBorrowBook.add(jMenuItem_deleteAllRegisteBorrowBookCopy);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trang thông tin sách và đăng ký mượn sách");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 102, 0))); // NOI18N

        jLabel1.setText("Mã sách :");

        jTextField_id.setName(""); // NOI18N

        jLabel2.setText("Nhà xuất bản :");

        jLabel3.setText("Tác giả :");

        jLabel4.setText("Thể loại : ");

        jLabel8.setText("Tên sách : ");

        jTextField_title.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField_title.setName(""); // NOI18N

        jLabel7.setText("Xin chào");

        jButton_searchBook.setText("Tìm kiếm");
        jButton_searchBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_searchBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel_username, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField_title, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jTextField_author)
                            .addComponent(jTextField_id))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_searchBook)
                            .addComponent(jComboBox_publisher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox_category, 0, 181, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_username, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextField_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox_publisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField_author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton_searchBook)))
                .addContainerGap())
        );

        jTable_searchBookCopy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Tác giả", "Nhà xuất bản", "Thể loại", "Số sách copy khả dụng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_searchBookCopy.setComponentPopupMenu(jPopupMenu_registeBorrowBook);
        jTable_searchBookCopy.setRowSelectionAllowed(true);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jPopupMenu_registeBorrowBook, org.jdesktop.beansbinding.ObjectProperty.create(), jTable_searchBookCopy, org.jdesktop.beansbinding.BeanProperty.create("componentPopupMenu"));
        bindingGroup.addBinding(binding);

        jScrollPane1.setViewportView(jTable_searchBookCopy);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Giỏ đăng ký sách", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 102, 0))); // NOI18N

        jTable_regisBookCopyBasket.setAutoCreateRowSorter(true);
        jTable_regisBookCopyBasket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách"
            }
        ));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jPopupMenu_basket, org.jdesktop.beansbinding.ObjectProperty.create(), jTable_regisBookCopyBasket, org.jdesktop.beansbinding.BeanProperty.create("componentPopupMenu"));
        bindingGroup.addBinding(binding);

        jScrollPane5.setViewportView(jTable_regisBookCopyBasket);

        jButton1.setText("Đăng ký");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jButton1)
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1))
        );

        javax.swing.GroupLayout jPanel_searchBookLayout = new javax.swing.GroupLayout(jPanel_searchBook);
        jPanel_searchBook.setLayout(jPanel_searchBookLayout);
        jPanel_searchBookLayout.setHorizontalGroup(
            jPanel_searchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel_searchBookLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_searchBookLayout.setVerticalGroup(
            jPanel_searchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_searchBookLayout.createSequentialGroup()
                .addGroup(jPanel_searchBookLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel_borrowBook.setPreferredSize(new java.awt.Dimension(840, 471));
        jPanel_borrowBook.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setPreferredSize(new java.awt.Dimension(417, 471));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Danh sách những sách đã đăng ký mượn");

        jTable_registedBookCopy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Ngày đăng ký", "Hạn đến mượn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jPopupMenu_registedBorrowBook, org.jdesktop.beansbinding.ObjectProperty.create(), jTable_registedBookCopy, org.jdesktop.beansbinding.BeanProperty.create("componentPopupMenu"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(jTable_registedBookCopy);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel_borrowBook.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setPreferredSize(new java.awt.Dimension(417, 0));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Danh sách những sách đã  mượn");

        jTable_borrowedBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sách", "Tên sách", "Ngày mượn", "Hạn trả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable_borrowedBook);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel_borrowBook.add(jPanel4);

        jLayeredPane1.setLayer(jPanel_searchBook, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jPanel_borrowBook, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_searchBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_borrowBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_searchBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel_borrowBook, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/applications_system.png"))); // NOI18N
        jMenu1.setText("Hệ thống");

        jMenuItem1.setText("Thông tin tài khoản");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Đăng xuất");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Thoát");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/utilitie.png"))); // NOI18N
        jMenu2.setText("Tính năng");

        jMenuItem4.setText("Tìm kiếm sách");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Mượn sách");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
        );

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (username == null) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Chưa có tài khoản, bạn có muốn đăng ký không?", "Cảnh báo", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Saving code here
                RegisterForm form = new RegisterForm();
                form.setVisible(true);
                this.setVisible(false);
            }
        } else {
            displayInforRegistedAndBorrowedBookCopy();
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        setVisiableSearchBook();
        bc.displayBookListToTable(jTable_searchBookCopy, bc.getAllBook());
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem_inforBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_inforBookActionPerformed
        // TODO add your handling code here:
        displayInforBook();
    }//GEN-LAST:event_jMenuItem_inforBookActionPerformed

    private void jMenuItem_addBookCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_addBookCopyActionPerformed
        // TODO add your handling code here:
        if (username == null) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Chưa có tài khoản, bạn có muốn đăng ký không?", "Cảnh báo", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Saving code here
                RegisterForm form = new RegisterForm();
                form.setVisible(true);
                this.setVisible(false);
            }
        } else {
            addBookCopyToBasket();
        }
    }//GEN-LAST:event_jMenuItem_addBookCopyActionPerformed

    private void jMenuItem_deleteBookCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteBookCopyActionPerformed
        // TODO add your handling code here:
        deleteBookCopyInBasker();
    }//GEN-LAST:event_jMenuItem_deleteBookCopyActionPerformed

    private void jMenuItem_deleteAllBasketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteAllBasketActionPerformed
        // TODO add your handling code here:
        deleteAllBook();
    }//GEN-LAST:event_jMenuItem_deleteAllBasketActionPerformed

    private void jButton_searchBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_searchBookActionPerformed
        // TODO add your handling code here:
        searchBook();
    }//GEN-LAST:event_jButton_searchBookActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (username == null) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Chưa có tài khoản, bạn có muốn đăng ký không?", "Cảnh báo", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Saving code here
                RegisterForm form = new RegisterForm();
                form.setVisible(true);
                this.setVisible(false);
            }
        } else {
            registeAllBook();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        if (username == null) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(this, "Chưa có tài khoản, bạn có muốn đăng ký không?", "Cảnh báo", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                // Saving code here
                RegisterForm form = new RegisterForm();
                form.setVisible(true);
                this.setVisible(false);
            }
        } else {
            getInforAccount(jLabel_username.getText());
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem_deleteRegisreBorrowBookCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteRegisreBorrowBookCopyActionPerformed
        // TODO add your handling code here:
        unRegisteBookCopy();
    }//GEN-LAST:event_jMenuItem_deleteRegisreBorrowBookCopyActionPerformed

    private void jMenuItem_deleteAllRegisteBorrowBookCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_deleteAllRegisteBorrowBookCopyActionPerformed
        // TODO add your handling code here:
        unAllRegisteBookCopy();
    }//GEN-LAST:event_jMenuItem_deleteAllRegisteBorrowBookCopyActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        deleteAllBookWhenWindowClosing();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        deleteAllBookBasket();
        this.dispose();
        ChooseLoginForm loginForm = new ChooseLoginForm();
        loginForm.setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        deleteAllBookWhenWindowClosing();
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void displayInforBook() {
        int index = jTable_searchBookCopy.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn sách cần xem thông tin");
        } else {
            String idBook = jTable_searchBookCopy.getValueAt(index, 0).toString();
            List<BookCopy> listBookCopy = bcc.getAllBookCopyById(idBook);
            InforBookForm inforBookForm = new InforBookForm();
            inforBookForm.removeUpdateBookCopyPopupMenu();
            bcc.loadBookCopyToTable(inforBookForm.getjTable_inforBookCopy(), listBookCopy);
            inforBookForm.getjLabel_numberBookCopy().setText(listBookCopy.size() + "");
        }
    }

//    

    private void addBookCopyToBasket() {
        int index = jTable_searchBookCopy.getSelectedRow();
        String idCard = jLabel_username.getText();
        int result_CheckUser = bcc.checkUserWhenRegisteBookCopy(index, idCard, jTable_searchBookCopy);
        switch (result_CheckUser) {
            case Constants.NO_SELECT_ROW_TABLE:
                JOptionPane.showMessageDialog(this, "Bạn chưa chọn sách không thể thêm vào giỏ đăng ký mượn");
                break;
            case Constants.NO_ACTIVE_CARD:
                JOptionPane.showMessageDialog(this, "Tài khoản của bạn chưa kích hoạt.Không thể đăng ký mượn sách");
                break;
            case Constants.EXPIRED_CARD:
                JOptionPane.showMessageDialog(this, "Tài khoản của bạn hết hạn.Không thể đăng ký mượn sách");
                break;
            case Constants.OVER_DUE_BOOKCOPY:
                JOptionPane.showMessageDialog(this, "Hiện tại bạn còn sách quá hạn chưa trả.Không thể đăng ký mượn sách."
                        + "\nVui lòng đến trả sách để có thể đăng ký.");
                break;
            case Constants.BORROWABLE:
                String idBook = jTable_searchBookCopy.getValueAt(index, 0).toString();
                int countBookCopyBorrowable = bcc.checkCountBookCopyBorrowable(idBook);
                if (countBookCopyBorrowable == 0) {
                    JOptionPane.showMessageDialog(this, "Hiện tại sách này đã được mượn hoặc đăng ký hết.Không thể đăng ký mượn.Vui lòng đăng ký lại sau");
                } else {
                    if (JOptionPane.showConfirmDialog(null, "Bạn có muốn thêm sách này vào giỏ đăng ký không ??", "Thông báo ",
                            JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
                        int countBookBorrow = 0;                       
                        boolean dowhile = true;
                        dowhilegetCountBorrowBook:
                        do {
                            String countBookBorrow_String = JOptionPane.showInputDialog(rootPane, "Nhập số lượng sách cần mượn!!!");
                            if (countBookBorrow_String == null) {
                                break;
                            } else if (Utils.isStringInteger(countBookBorrow_String) == false) {
                                JOptionPane.showMessageDialog(this, "Số sách nhập phải nguyên dương");
                                continue dowhilegetCountBorrowBook;
                            } else {
                                countBookBorrow = Integer.valueOf(countBookBorrow_String);
                                if (countBookBorrow <= 0) {
                                    JOptionPane.showMessageDialog(this, "Số lượng sách đăng ký mượn phải lớn hơn 0");
                                    continue dowhilegetCountBorrowBook;
                                } else if (countBookBorrow > 5) {
                                    JOptionPane.showMessageDialog(this, "Số lượng sách đăng ký mượn không vượt quá 5");
                                    continue dowhilegetCountBorrowBook;
                                } else if (countBookBorrow > countBookCopyBorrowable) {
                                    JOptionPane.showMessageDialog(this, "Số lượng sách bản copy hiện tại có thể mượn là " + countBookCopyBorrowable + "quyển.Bạn phải nhập số lượng nhỏ hơn");
                                    continue dowhilegetCountBorrowBook;
                                } else {
                                    int result_RegisteBookCopy = bcc.addBookCopy(index, idCard, jTable_searchBookCopy, countBookBorrow, jTable_regisBookCopyBasket);
                                    switch (result_RegisteBookCopy) {
                                        case Constants.BORROW_OVER_FIVE_BOOKCOPY:
                                            JOptionPane.showMessageDialog(this, "Bạn không thể đăng ký mượn quá 5 quyển.");
                                            continue dowhilegetCountBorrowBook;
                                        case Constants.BORROW_OVER_FIVE_BOOKCOPY_BOTH_REGISTED_BOOK:
                                            continue dowhilegetCountBorrowBook;
                                        case Constants.BORROW_OVER_FIVE_BOOKCOPY_BOTH_BORROWED:
                                            continue dowhilegetCountBorrowBook;
                                        case Constants.BORROW_OVER_FIVE_BOOKCOPY_BOTH_REGISTED_BOOK_AND_BORROWED:
                                            continue dowhilegetCountBorrowBook;
                                        case Constants.SUCCESS :
                                            dowhile = false;
                                            break;
                                    }
                                }
                            }
                        } while (dowhile);
                    }
                }
                break;
        }
    }

    private void deleteBookCopyInBasker() {
        int index = jTable_regisBookCopyBasket.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn dòng.Không thể xóa");
        } else {
            if (JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa sách này vào khỏi đăng ký không ??", "Thông báo ",
                    JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
                bcc.updateStatusUnRegistedBookCopy(jTable_regisBookCopyBasket.getValueAt(index, 0).toString());
                DefaultTableModel dtm = (DefaultTableModel) jTable_regisBookCopyBasket.getModel();
                dtm.removeRow(index);
                jTable_regisBookCopyBasket.setModel(dtm);
                bc.displayBookListToTable(jTable_searchBookCopy, bc.getAllBook());
            }
        }
    }

    private void deleteAllBook() {
        if (JOptionPane.showConfirmDialog(null, "Bạn có muốn xóa toàn bộ sách này khỏi giỏ đăng ký không ??", "Thông báo ",
                JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
            DefaultTableModel dtm = (DefaultTableModel) jTable_regisBookCopyBasket.getModel();
            for (int i = 0; i < jTable_regisBookCopyBasket.getRowCount(); i++) {
                bcc.updateStatusUnRegistedBookCopy(jTable_regisBookCopyBasket.getValueAt(i, 0).toString());
            }
            dtm.setRowCount(0);
            jTable_regisBookCopyBasket.setModel(dtm);
            bc.displayBookListToTable(jTable_searchBookCopy, bc.getAllBook());
        }
    }

    private void registeAllBook() {
        if (JOptionPane.showConfirmDialog(null, "Bạn có muốn đăng ký toàn bộ sách này trong giỏ đăng ký không ??", "Thông báo ",
                JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
            int countRowTable = jTable_regisBookCopyBasket.getRowCount();
            if (countRowTable == 0) {
                JOptionPane.showMessageDialog(this, "Giỏ trống,không thể đăng ký.Vui lòng chọn thêm sách vào giỏ");
            } else {
                int idRegiste = bcc.generateIdRegiste();
                String idCard = jLabel_username.getText();
                String cardNo = cc.getCardNoById(idCard);
                String name = uc.getNameById(idCard);
                Date dateNow = new Date(Calendar.getInstance().getTimeInMillis());
                DefaultTableModel dtm = (DefaultTableModel) jTable_regisBookCopyBasket.getModel();
                if (bcc.createRegisteBook(idRegiste, cardNo, name, dateNow)) {
                    int checkCout = 0;
                    for (int i = 0; i < countRowTable; i++) {
                        String idCopy = jTable_regisBookCopyBasket.getValueAt(i, 0).toString();
                        String title = jTable_regisBookCopyBasket.getValueAt(i, 1).toString();
                        if (bcc.registeBookCopy(idRegiste, idCopy, title)) {
                            checkCout++;
                        } else {
                            bcc.updateStatusUnRegistedBookCopy(idCopy);
                            JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi.Dòng " + (i + 1) + " trong bảng không đúng.");
                            break;
                        }
                    }
                    if (checkCout == countRowTable) {
                        dtm.setNumRows(0);
                        JOptionPane.showMessageDialog(this, "Đăng ký sách thành công.Vui lòng kiểm tra danh mục sách đã đăng ký\n"
                                + "và đến mượn sách đúng hạn đăng ký mượn sách");
                    }
                }
            }
        }
    }

    private void searchBook() {
        String id = jTextField_id.getText().trim();
        String title = jTextField_title.getText().trim();
        String author = jTextField_author.getText().trim();
        String publish = jComboBox_publisher.getSelectedItem().toString();
        String category = jComboBox_category.getSelectedItem().toString();
        List<Book> listBook = new ArrayList<>();

        //Trả về danh sách Book tìm kiếm được
        listBook = bc.searchBook_Registe(id, title, author, publish, category);

        //Đưa dữ liệu sách tìm kiếm được ra bảng
        bc.displayBookListToTable(jTable_searchBookCopy, listBook);
    }

    //Hiển thị panel tìm kiếm sách
    public void setVisiableSearchBook() {
        jPanel_borrowBook.setVisible(false);
        jPanel_searchBook.setVisible(true);
    }

    //Hiển thị panel mượn sách và đăng ký mượn sách
    public void setVisiableBorrowBook() {
        jPanel_borrowBook.setVisible(true);
        jPanel_searchBook.setVisible(false);
    }

    //Truyền tham số username từ form Login sang form Home
    public void setUsername(String username) {
        jLabel_username.setText(username);
    }

    private void getInforAccount(String username) {
        uc.displayInforAccount(username);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton_searchBook;
    private javax.swing.JComboBox<String> jComboBox_category;
    private javax.swing.JComboBox<String> jComboBox_publisher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_username;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem_addBookCopy;
    private javax.swing.JMenuItem jMenuItem_deleteAllBasket;
    private javax.swing.JMenuItem jMenuItem_deleteAllRegisteBorrowBookCopy;
    private javax.swing.JMenuItem jMenuItem_deleteBookCopy;
    private javax.swing.JMenuItem jMenuItem_deleteRegisreBorrowBookCopy;
    private javax.swing.JMenuItem jMenuItem_inforBook;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel_borrowBook;
    private javax.swing.JPanel jPanel_searchBook;
    private javax.swing.JPopupMenu jPopupMenu_basket;
    private javax.swing.JPopupMenu jPopupMenu_registeBorrowBook;
    private javax.swing.JPopupMenu jPopupMenu_registedBorrowBook;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable_borrowedBook;
    private javax.swing.JTable jTable_regisBookCopyBasket;
    private javax.swing.JTable jTable_registedBookCopy;
    private javax.swing.JTable jTable_searchBookCopy;
    private javax.swing.JTextField jTextField_author;
    private javax.swing.JTextField jTextField_id;
    private javax.swing.JTextField jTextField_title;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void unRegisteBookCopy() {
        int index = jTable_registedBookCopy.getSelectedRow();
        if (index < 0) {
            JOptionPane.showMessageDialog(this, "Bạn chưa chọn sách cần hủy đăng ký");
        } else {
            if (JOptionPane.showConfirmDialog(null, "Bạn có muốn hủy đăng ký sách này không ??", "Thông báo ",
                    JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
                String idCopy = jTable_registedBookCopy.getValueAt(index, 0).toString();
                if (bcc.unRegisteBookCopy(idCopy)) {
                    if (bcc.updateStatusUnRegistedBookCopy(idCopy)) {
                        JOptionPane.showMessageDialog(this, "Hủy đăng ký thành công");
                        bcc.deleteRowInTable(jTable_registedBookCopy, index);
                    } else {
                        int idRegisted = bcc.getIdRegistedByIdBookCopy(idCopy);
                        String title = jTable_registedBookCopy.getValueAt(index, 1).toString();
                        bcc.registeBookCopy(idRegisted, idCopy, title);
                        JOptionPane.showMessageDialog(this, "Hủy đăng ký thất bại.Vui lòng thử lại sau");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Hủy đăng ký thất bại.Vui lòng thử lại sau");
                }
            }
        }
    }

    private void unAllRegisteBookCopy() {
        if (JOptionPane.showConfirmDialog(null, "Bạn có muốn hủy toàn bộ đăng ký sách không ??", "Thông báo ",
                JOptionPane.YES_OPTION) == JOptionPane.YES_NO_OPTION) {
            int countRow = jTable_registedBookCopy.getRowCount();
            int checkCount = 0;
            String idCard = cc.getCardNoById(jLabel_username.getText());
            if (bcc.unAllRegisteBookCopy(idCard)) {
                for (int i = 0; i < countRow; i++) {
                    bcc.updateStatusUnRegistedBookCopy(jTable_registedBookCopy.getValueAt(i, 0).toString());
                    checkCount++;
                }
                if (checkCount == countRow) {
                    JOptionPane.showMessageDialog(this, "Hủy đăng ký thành công");
                    bcc.deleteAllRowInTable(jTable_registedBookCopy);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Hủy đăng ký thất bại.Vui lòng thử lại sau");
            }
        }
    }

    private void displayInforRegistedAndBorrowedBookCopy() {
        setVisiableBorrowBook();
        String idCard = jLabel_username.getText();
        String cardNo = cc.getCardNoById(idCard);
        List<RegisterBorrow> listRegisterBorrows = bcc.getRegistedBookCopyLisrByCardNo(cardNo);
        bcc.displayDetailRegistedBookCopy(jTable_registedBookCopy, listRegisterBorrows);
        List<Loan> lisLoanBook = bcc.getListLoanBook(cardNo);
        bcc.displayDetailLoanBook(jTable_borrowedBook, lisLoanBook);
    }

    private void deleteAllBookWhenWindowClosing() {
        int coutRow = jTable_regisBookCopyBasket.getRowCount();
        if (coutRow > 0) {
            DefaultTableModel dtm = (DefaultTableModel) jTable_regisBookCopyBasket.getModel();
            for (int i = 0; i < coutRow; i++) {
                bcc.updateStatusUnRegistedBookCopy(jTable_regisBookCopyBasket.getValueAt(i, 0).toString());
            }
            dtm.setRowCount(0);
            jTable_regisBookCopyBasket.setModel(dtm);
        } else {
            System.exit(0);
        }
    }
    
    private void deleteAllBookBasket(){
        int coutRow = jTable_regisBookCopyBasket.getRowCount();
        if (coutRow > 0) {
            DefaultTableModel dtm = (DefaultTableModel) jTable_regisBookCopyBasket.getModel();
            for (int i = 0; i < coutRow; i++) {
                bcc.updateStatusUnRegistedBookCopy(jTable_regisBookCopyBasket.getValueAt(i, 0).toString());
            }
            dtm.setRowCount(0);
            jTable_regisBookCopyBasket.setModel(dtm);
        }
    }
}
